searchState.loadedDescShard("prioritized_metered_channel", 0, "Metered variant of mpsc channels to be able to extract …\nA duration type to represent an approximate span of time\nMeasure the time of flight between insertion and removal …\nA peek into the inner state of a meter.\nA receiver tracking the messages consumed by itself.\nThe sender component, tracking the number of items sent …\nA readout of sizes from the meter. Note that it is …\nError when receiving from a closed bounded channel\nA bounded channel error\nA bounded channel error when trying to send a message …\nA receiver tracking the messages consumed by itself.\nThe sender component, tracking the number of items sent …\nReturns the absolute difference between two <code>Duration</code>s\nReturns the number of days represented by this duration\nReturns the duration as a floating point number, …\nReturns the number of minutes represented by this duration\nReturns the number of whole microseconds represented by …\nReturns the number of whole milliseconds represented by …\nReturns the number of minutes represented by this duration\nReturns the number of whole nanoseconds represented by …\nReturns the number of whole seconds represented by this …\nReturn this duration as a number of “ticks”.\nHow many times the caller blocked when sending messages.\nCreate a pair of <code>MeteredSender</code> and <code>MeteredReceiver</code>. No …\nAn approximation of the queue size.\nCreate a pair of <code>MeteredSender</code> and <code>MeteredReceiver</code>. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new Duration from the specified number of days\nCreates a new Duration from the specified number of hours\nCreates a new Duration from the specified number of …\nCreates a new Duration from the specified number of minutes\nCreates a new Duration from the specified number of seconds\nCreates a new Duration from the specified number of “…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the inner <code>T</code> value.\nReturns the inner value.\nReturns the inner value.\nReturns <code>true</code> if we could not send to channel as it was …\nReturns <code>true</code> if we could not send to channel as it was full\nReturns the current number of messages in the channel …\nReturns the current number of messages in the channel …\nGet an updated accessor object for all metrics collected.\nGet an updated accessor object for all metrics collected.\nGet an updated accessor object for all metrics collected.\nGet an updated accessor object for all metrics collected.\nCreates a new <code>Duration</code> from the specified number of …\nMetered variant of oneshot channels to be able to extract …\nSend message in priority channel (if configured), wait …\nCount the number of items queued up inside the channel.\nThe amount of messages received on the channel, in …\nSend message in bulk channel, wait until capacity is …\nThe amount of messages sent on the channel, in aggregate.\nDon’t rely on the unreliable size hint.\nDon’t rely on the unreliable size hint.\nReturns the nanosecond precision represented by this …\nTime of flight in micro seconds (us)\nTransform the inner value.\nAttempt to receive the next item. This function returns:\nAttempt to receive the next item.\nAttempt to send message or fail immediately.\nAttempt to send message or fail immediately.\nTransform the inner value, fail-able version.\nCreate a wrapped <code>mpsc::channel</code> pair of <code>MeteredSender</code> and …\nAttempt to send message or fail immediately.\nA dummy trait that allows implementing <code>measurements</code> for …\nObtained measurements by the <code>Receiver</code> side of the …\nOneshot receiver, created by <code>channel</code>.\nOneshot sender, created by <code>channel</code>.\nA wrapping type for the actual type <code>T</code> that is sent with the\nProvides the reason for termination.\nAccess the cancellation object.\nCreate a new pair of <code>OneshotMetered{Sender,Receiver}</code>.\nObtain the duration of a finished or canceled <code>oneshot</code> …\nObtain the duration of a finished or canceled <code>oneshot</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the wrapper type into it’s inner value.\nCalls <code>U::from(self)</code>.\nCheck the cancellation state.\nVerify if the <code>receiver</code> is connected to the <code>sender</code> <code>Self</code>.\nObtain a set of measurements represented by the …\nPoll if the thing is already canceled.\nObtain the reason to the channel termination.\nSend a value.\nAttempts to receive a message outside of the context of a …")