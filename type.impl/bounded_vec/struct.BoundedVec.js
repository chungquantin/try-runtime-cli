(function() {
    var type_impls = Object.fromEntries([["bounded_vec",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3C%5BT%5D%3E-for-BoundedVec%3CT,+L,+U%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#420-424\">Source</a><a href=\"#impl-AsMut%3C%5BT%5D%3E-for-BoundedVec%3CT,+L,+U%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const L: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, const U: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"bounded_vec/struct.BoundedVec.html\" title=\"struct bounded_vec::BoundedVec\">BoundedVec</a>&lt;T, L, U&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#421-423\">Source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<[T]>","bounded_vec::bounded_vec::NonEmptyVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CVec%3CT%3E%3E-for-BoundedVec%3CT,+L,+U%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#414-418\">Source</a><a href=\"#impl-AsMut%3CVec%3CT%3E%3E-for-BoundedVec%3CT,+L,+U%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const L: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, const U: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"bounded_vec/struct.BoundedVec.html\" title=\"struct bounded_vec::BoundedVec\">BoundedVec</a>&lt;T, L, U&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#415-417\">Source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<Vec<T>>","bounded_vec::bounded_vec::NonEmptyVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5BT%5D%3E-for-BoundedVec%3CT,+L,+U%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#408-412\">Source</a><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-BoundedVec%3CT,+L,+U%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const L: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, const U: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"bounded_vec/struct.BoundedVec.html\" title=\"struct bounded_vec::BoundedVec\">BoundedVec</a>&lt;T, L, U&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#409-411\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[T]>","bounded_vec::bounded_vec::NonEmptyVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CVec%3CT%3E%3E-for-BoundedVec%3CT,+L,+U%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#402-406\">Source</a><a href=\"#impl-AsRef%3CVec%3CT%3E%3E-for-BoundedVec%3CT,+L,+U%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const L: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, const U: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"bounded_vec/struct.BoundedVec.html\" title=\"struct bounded_vec::BoundedVec\">BoundedVec</a>&lt;T, L, U&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#403-405\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<Vec<T>>","bounded_vec::bounded_vec::NonEmptyVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BoundedVec%3CT,+L,+U%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#46-349\">Source</a><a href=\"#impl-BoundedVec%3CT,+L,+U%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const L: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, const U: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"bounded_vec/struct.BoundedVec.html\" title=\"struct bounded_vec::BoundedVec\">BoundedVec</a>&lt;T, L, U&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_vec\" class=\"method\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#54-72\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bounded_vec/struct.BoundedVec.html#tymethod.from_vec\" class=\"fn\">from_vec</a>(items: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"bounded_vec/enum.BoundedVecOutOfBounds.html\" title=\"enum bounded_vec::BoundedVecOutOfBounds\">BoundedVecOutOfBounds</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates new BoundedVec or returns error if items count is out of bounds</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bounded_vec::BoundedVec;\n<span class=\"kw\">let </span>data: BoundedVec&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>&gt; = BoundedVec::from_vec(<span class=\"macro\">vec!</span>[<span class=\"number\">1u8</span>, <span class=\"number\">2</span>]).unwrap();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_vec\" class=\"method\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#84-86\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bounded_vec/struct.BoundedVec.html#tymethod.as_vec\" class=\"fn\">as_vec</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a reference to underlying `Vec``</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bounded_vec::BoundedVec;\n<span class=\"kw\">use </span>std::convert::TryInto;\n\n<span class=\"kw\">let </span>data: BoundedVec&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">1u8</span>, <span class=\"number\">2</span>].try_into().unwrap();\n<span class=\"macro\">assert_eq!</span>(data.as_vec(), <span class=\"kw-2\">&amp;</span><span class=\"macro\">vec!</span>[<span class=\"number\">1u8</span>,<span class=\"number\">2</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_vec\" class=\"method\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#98-100\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bounded_vec/struct.BoundedVec.html#tymethod.to_vec\" class=\"fn\">to_vec</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an underlying `Vec``</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bounded_vec::BoundedVec;\n<span class=\"kw\">use </span>std::convert::TryInto;\n\n<span class=\"kw\">let </span>data: BoundedVec&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">1u8</span>, <span class=\"number\">2</span>].try_into().unwrap();\n<span class=\"macro\">assert_eq!</span>(data.to_vec(), <span class=\"macro\">vec!</span>[<span class=\"number\">1u8</span>,<span class=\"number\">2</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#112-114\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bounded_vec/struct.BoundedVec.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in the vector</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bounded_vec::BoundedVec;\n<span class=\"kw\">use </span>std::convert::TryInto;\n\n<span class=\"kw\">let </span>data: BoundedVec&lt;u8, <span class=\"number\">2</span>, <span class=\"number\">4</span>&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">1u8</span>,<span class=\"number\">2</span>].try_into().unwrap();\n<span class=\"macro\">assert_eq!</span>(data.len(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#126-128\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bounded_vec/struct.BoundedVec.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Always returns <code>false</code> (cannot be empty)</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bounded_vec::BoundedVec;\n<span class=\"kw\">use </span>std::convert::TryInto;\n\n<span class=\"kw\">let </span>data: BoundedVec&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">1u8</span>, <span class=\"number\">2</span>].try_into().unwrap();\n<span class=\"macro\">assert_eq!</span>(data.is_empty(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#140-142\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bounded_vec/struct.BoundedVec.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Extracts a slice containing the entire vector.</p>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bounded_vec::BoundedVec;\n<span class=\"kw\">use </span>std::convert::TryInto;\n\n<span class=\"kw\">let </span>data: BoundedVec&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">1u8</span>, <span class=\"number\">2</span>].try_into().unwrap();\n<span class=\"macro\">assert_eq!</span>(data.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1u8</span>,<span class=\"number\">2</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.first\" class=\"method\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#154-157\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bounded_vec/struct.BoundedVec.html#tymethod.first\" class=\"fn\">first</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\"><p>Returns the first element of non-empty Vec</p>\n<h5 id=\"example-6\"><a class=\"doc-anchor\" href=\"#example-6\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bounded_vec::BoundedVec;\n<span class=\"kw\">use </span>std::convert::TryInto;\n\n<span class=\"kw\">let </span>data: BoundedVec&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">1u8</span>, <span class=\"number\">2</span>].try_into().unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>data.first(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.last\" class=\"method\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#169-172\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bounded_vec/struct.BoundedVec.html#tymethod.last\" class=\"fn\">last</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\"><p>Returns the last element of non-empty Vec</p>\n<h5 id=\"example-7\"><a class=\"doc-anchor\" href=\"#example-7\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bounded_vec::BoundedVec;\n<span class=\"kw\">use </span>std::convert::TryInto;\n\n<span class=\"kw\">let </span>data: BoundedVec&lt;<span class=\"kw\">_</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">1u8</span>, <span class=\"number\">2</span>].try_into().unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>data.last(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mapped\" class=\"method\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#187-194\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bounded_vec/struct.BoundedVec.html#tymethod.mapped\" class=\"fn\">mapped</a>&lt;F, N&gt;(self, map_fn: F) -&gt; <a class=\"struct\" href=\"bounded_vec/struct.BoundedVec.html\" title=\"struct bounded_vec::BoundedVec\">BoundedVec</a>&lt;N, L, U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(T) -&gt; N,</div></h4></section></summary><div class=\"docblock\"><p>Create a new <code>BoundedVec</code> by consuming <code>self</code> and mapping each element.</p>\n<p>This is useful as it keeps the knowledge that the length is &gt;= U, &lt;= L,\neven through the old <code>BoundedVec</code> is consumed and turned into an iterator.</p>\n<h5 id=\"example-8\"><a class=\"doc-anchor\" href=\"#example-8\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bounded_vec::BoundedVec;\n<span class=\"kw\">let </span>data: BoundedVec&lt;u8, <span class=\"number\">2</span>, <span class=\"number\">8</span>&gt; = [<span class=\"number\">1u8</span>,<span class=\"number\">2</span>].into();\n<span class=\"kw\">let </span>data = data.mapped(|x|x<span class=\"kw-2\">*</span><span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(data, [<span class=\"number\">2u8</span>,<span class=\"number\">4</span>].into());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mapped_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#209-216\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bounded_vec/struct.BoundedVec.html#tymethod.mapped_ref\" class=\"fn\">mapped_ref</a>&lt;F, N&gt;(&amp;self, map_fn: F) -&gt; <a class=\"struct\" href=\"bounded_vec/struct.BoundedVec.html\" title=\"struct bounded_vec::BoundedVec\">BoundedVec</a>&lt;N, L, U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;T</a>) -&gt; N,</div></h4></section></summary><div class=\"docblock\"><p>Create a new <code>BoundedVec</code> by mapping references to the elements of self</p>\n<p>This is useful as it keeps the knowledge that the length is &gt;= U, &lt;= L,\nwill still hold for new <code>BoundedVec</code></p>\n<h5 id=\"example-9\"><a class=\"doc-anchor\" href=\"#example-9\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bounded_vec::BoundedVec;\n<span class=\"kw\">let </span>data: BoundedVec&lt;u8, <span class=\"number\">2</span>, <span class=\"number\">8</span>&gt; = [<span class=\"number\">1u8</span>,<span class=\"number\">2</span>].into();\n<span class=\"kw\">let </span>data = data.mapped_ref(|x|x<span class=\"kw-2\">*</span><span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(data, [<span class=\"number\">2u8</span>,<span class=\"number\">4</span>].into());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_mapped\" class=\"method\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#243-254\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bounded_vec/struct.BoundedVec.html#tymethod.try_mapped\" class=\"fn\">try_mapped</a>&lt;F, N, E&gt;(self, map_fn: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"bounded_vec/struct.BoundedVec.html\" title=\"struct bounded_vec::BoundedVec\">BoundedVec</a>&lt;N, L, U&gt;, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;N, E&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create a new <code>BoundedVec</code> by consuming <code>self</code> and mapping each element\nto a <code>Result</code>.</p>\n<p>This is useful as it keeps the knowledge that the length is preserved\neven through the old <code>BoundedVec</code> is consumed and turned into an iterator.</p>\n<p>As this method consumes self, returning an error means that this\nvec is dropped. I.e. this method behaves roughly like using a\nchain of <code>into_iter()</code>, <code>map</code>, <code>collect::&lt;Result&lt;Vec&lt;N&gt;,E&gt;&gt;</code> and\nthen converting the <code>Vec</code> back to a <code>Vec1</code>.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Once any call to <code>map_fn</code> returns a error that error is directly\nreturned by this method.</p>\n<h5 id=\"example-10\"><a class=\"doc-anchor\" href=\"#example-10\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bounded_vec::BoundedVec;\n<span class=\"kw\">let </span>data: BoundedVec&lt;u8, <span class=\"number\">2</span>, <span class=\"number\">8</span>&gt; = [<span class=\"number\">1u8</span>,<span class=\"number\">2</span>].into();\n<span class=\"kw\">let </span>data: <span class=\"prelude-ty\">Result</span>&lt;BoundedVec&lt;u8, <span class=\"number\">2</span>, <span class=\"number\">8</span>&gt;, <span class=\"kw\">_</span>&gt; = data.try_mapped(|x| <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"failed\"</span>));\n<span class=\"macro\">assert_eq!</span>(data, <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"failed\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_mapped_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#275-286\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bounded_vec/struct.BoundedVec.html#tymethod.try_mapped_ref\" class=\"fn\">try_mapped_ref</a>&lt;F, N, E&gt;(\n    &amp;self,\n    map_fn: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"bounded_vec/struct.BoundedVec.html\" title=\"struct bounded_vec::BoundedVec\">BoundedVec</a>&lt;N, L, U&gt;, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;N, E&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create a new <code>BoundedVec</code> by mapping references of <code>self</code> elements\nto a <code>Result</code>.</p>\n<p>This is useful as it keeps the knowledge that the length is preserved\neven through the old <code>BoundedVec</code> is consumed and turned into an iterator.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>Once any call to <code>map_fn</code> returns a error that error is directly\nreturned by this method.</p>\n<h5 id=\"example-11\"><a class=\"doc-anchor\" href=\"#example-11\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bounded_vec::BoundedVec;\n<span class=\"kw\">let </span>data: BoundedVec&lt;u8, <span class=\"number\">2</span>, <span class=\"number\">8</span>&gt; = [<span class=\"number\">1u8</span>,<span class=\"number\">2</span>].into();\n<span class=\"kw\">let </span>data: <span class=\"prelude-ty\">Result</span>&lt;BoundedVec&lt;u8, <span class=\"number\">2</span>, <span class=\"number\">8</span>&gt;, <span class=\"kw\">_</span>&gt; = data.try_mapped_ref(|x| <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"failed\"</span>));\n<span class=\"macro\">assert_eq!</span>(data, <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"failed\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#298-300\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bounded_vec/struct.BoundedVec.html#tymethod.get\" class=\"fn\">get</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a reference for an element at index or <code>None</code> if out of bounds</p>\n<h5 id=\"example-12\"><a class=\"doc-anchor\" href=\"#example-12\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bounded_vec::BoundedVec;\n<span class=\"kw\">let </span>data: BoundedVec&lt;u8, <span class=\"number\">2</span>, <span class=\"number\">8</span>&gt; = [<span class=\"number\">1u8</span>,<span class=\"number\">2</span>].into();\n<span class=\"kw\">let </span>elem = <span class=\"kw-2\">*</span>data.get(<span class=\"number\">1</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(elem, <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#303-305\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bounded_vec/struct.BoundedVec.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/slice/iter/struct.Iter.html\" title=\"struct core::slice::iter::Iter\">Iter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#308-310\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bounded_vec/struct.BoundedVec.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/slice/iter/struct.IterMut.html\" title=\"struct core::slice::iter::IterMut\">IterMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator that allows to modify each value</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_last\" class=\"method\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#313-316\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bounded_vec/struct.BoundedVec.html#tymethod.split_last\" class=\"fn\">split_last</a>(&amp;self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;T</a>, &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.slice.html\">[T]</a>)</h4></section></summary><div class=\"docblock\"><p>Returns the last and all the rest of the elements</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.enumerated\" class=\"method\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#319-327\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bounded_vec/struct.BoundedVec.html#tymethod.enumerated\" class=\"fn\">enumerated</a>(self) -&gt; <a class=\"struct\" href=\"bounded_vec/struct.BoundedVec.html\" title=\"struct bounded_vec::BoundedVec\">BoundedVec</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, T), L, U&gt;</h4></section></summary><div class=\"docblock\"><p>Return a new BoundedVec with indices included</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.opt_empty_vec\" class=\"method\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#342-348\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bounded_vec/struct.BoundedVec.html#tymethod.opt_empty_vec\" class=\"fn\">opt_empty_vec</a>(\n    v: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"bounded_vec/struct.BoundedVec.html\" title=\"struct bounded_vec::BoundedVec\">BoundedVec</a>&lt;T, L, U&gt;&gt;, <a class=\"enum\" href=\"bounded_vec/enum.BoundedVecOutOfBounds.html\" title=\"enum bounded_vec::BoundedVecOutOfBounds\">BoundedVecOutOfBounds</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Return a Some(BoundedVec) or None if <code>v</code> is empty</p>\n<h5 id=\"example-13\"><a class=\"doc-anchor\" href=\"#example-13\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bounded_vec::BoundedVec;\n<span class=\"kw\">use </span>bounded_vec::OptBoundedVecToVec;\n\n<span class=\"kw\">let </span>opt_bv_none = BoundedVec::&lt;u8, <span class=\"number\">2</span>, <span class=\"number\">8</span>&gt;::opt_empty_vec(<span class=\"macro\">vec!</span>[]).unwrap();\n<span class=\"macro\">assert!</span>(opt_bv_none.is_none());\n<span class=\"macro\">assert_eq!</span>(opt_bv_none.to_vec(), <span class=\"macro\">vec!</span>[]);\n<span class=\"kw\">let </span>opt_bv_some = BoundedVec::&lt;u8, <span class=\"number\">2</span>, <span class=\"number\">8</span>&gt;::opt_empty_vec(<span class=\"macro\">vec!</span>[<span class=\"number\">0u8</span>, <span class=\"number\">2</span>]).unwrap();\n<span class=\"macro\">assert!</span>(opt_bv_some.is_some());\n<span class=\"macro\">assert_eq!</span>(opt_bv_some.to_vec(), <span class=\"macro\">vec!</span>[<span class=\"number\">0u8</span>, <span class=\"number\">2</span>]);</code></pre></div>\n</div></details></div></details>",0,"bounded_vec::bounded_vec::NonEmptyVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-BoundedVec%3CT,+L,+U%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#9\">Source</a><a href=\"#impl-Clone-for-BoundedVec%3CT,+L,+U%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>, const L: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, const U: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"bounded_vec/struct.BoundedVec.html\" title=\"struct bounded_vec::BoundedVec\">BoundedVec</a>&lt;T, L, U&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#9\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"bounded_vec/struct.BoundedVec.html\" title=\"struct bounded_vec::BoundedVec\">BoundedVec</a>&lt;T, L, U&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.85.1/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.85.1/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","bounded_vec::bounded_vec::NonEmptyVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-BoundedVec%3CT,+L,+U%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#9\">Source</a><a href=\"#impl-Debug-for-BoundedVec%3CT,+L,+U%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>, const L: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, const U: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"bounded_vec/struct.BoundedVec.html\" title=\"struct bounded_vec::BoundedVec\">BoundedVec</a>&lt;T, L, U&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#9\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","bounded_vec::bounded_vec::NonEmptyVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5BT;+L%5D%3E-for-BoundedVec%3CT,+L,+U%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#363-367\">Source</a><a href=\"#impl-From%3C%5BT;+L%5D%3E-for-BoundedVec%3CT,+L,+U%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const L: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, const U: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.array.html\">[T; L]</a>&gt; for <a class=\"struct\" href=\"bounded_vec/struct.BoundedVec.html\" title=\"struct bounded_vec::BoundedVec\">BoundedVec</a>&lt;T, L, U&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#364-366\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(arr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.array.html\">[T; L]</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[T; L]>","bounded_vec::bounded_vec::NonEmptyVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-BoundedVec%3CT,+L,+U%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#9\">Source</a><a href=\"#impl-Hash-for-BoundedVec%3CT,+L,+U%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>, const L: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, const U: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"bounded_vec/struct.BoundedVec.html\" title=\"struct bounded_vec::BoundedVec\">BoundedVec</a>&lt;T, L, U&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#9\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;mut __H</a>)</h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.85.1/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.85.1/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.85.1/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.85.1/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","bounded_vec::bounded_vec::NonEmptyVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-BoundedVec%3CT,+L,+U%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#375-382\">Source</a><a href=\"#impl-IntoIterator-for-BoundedVec%3CT,+L,+U%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const L: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, const U: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"bounded_vec/struct.BoundedVec.html\" title=\"struct bounded_vec::BoundedVec\">BoundedVec</a>&lt;T, L, U&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#376\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#377\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/into_iter/struct.IntoIter.html\" title=\"struct alloc::vec::into_iter::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#379-381\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","bounded_vec::bounded_vec::NonEmptyVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-BoundedVec%3CT,+L,+U%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#9\">Source</a><a href=\"#impl-Ord-for-BoundedVec%3CT,+L,+U%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>, const L: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, const U: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"bounded_vec/struct.BoundedVec.html\" title=\"struct bounded_vec::BoundedVec\">BoundedVec</a>&lt;T, L, U&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#9\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"bounded_vec/struct.BoundedVec.html\" title=\"struct bounded_vec::BoundedVec\">BoundedVec</a>&lt;T, L, U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#980-982\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1001-1003\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1027-1029\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","bounded_vec::bounded_vec::NonEmptyVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-BoundedVec%3CT,+L,+U%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#9\">Source</a><a href=\"#impl-PartialEq-for-BoundedVec%3CT,+L,+U%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>, const L: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, const U: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"bounded_vec/struct.BoundedVec.html\" title=\"struct bounded_vec::BoundedVec\">BoundedVec</a>&lt;T, L, U&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#9\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"bounded_vec/struct.BoundedVec.html\" title=\"struct bounded_vec::BoundedVec\">BoundedVec</a>&lt;T, L, U&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","bounded_vec::bounded_vec::NonEmptyVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-BoundedVec%3CT,+L,+U%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#9\">Source</a><a href=\"#impl-PartialOrd-for-BoundedVec%3CT,+L,+U%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>, const L: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, const U: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"bounded_vec/struct.BoundedVec.html\" title=\"struct bounded_vec::BoundedVec\">BoundedVec</a>&lt;T, L, U&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#9\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"bounded_vec/struct.BoundedVec.html\" title=\"struct bounded_vec::BoundedVec\">BoundedVec</a>&lt;T, L, U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1335\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1353\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1371\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1389\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","bounded_vec::bounded_vec::NonEmptyVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CVec%3CT%3E%3E-for-BoundedVec%3CT,+L,+U%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#354-360\">Source</a><a href=\"#impl-TryFrom%3CVec%3CT%3E%3E-for-BoundedVec%3CT,+L,+U%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const L: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, const U: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"bounded_vec/struct.BoundedVec.html\" title=\"struct bounded_vec::BoundedVec\">BoundedVec</a>&lt;T, L, U&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#355\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"bounded_vec/enum.BoundedVecOutOfBounds.html\" title=\"enum bounded_vec::BoundedVecOutOfBounds\">BoundedVecOutOfBounds</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#357-359\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<Vec<T>>","bounded_vec::bounded_vec::NonEmptyVec"],["<section id=\"impl-Eq-for-BoundedVec%3CT,+L,+U%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#9\">Source</a><a href=\"#impl-Eq-for-BoundedVec%3CT,+L,+U%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>, const L: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, const U: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"bounded_vec/struct.BoundedVec.html\" title=\"struct bounded_vec::BoundedVec\">BoundedVec</a>&lt;T, L, U&gt;</h3></section>","Eq","bounded_vec::bounded_vec::NonEmptyVec"],["<section id=\"impl-StructuralPartialEq-for-BoundedVec%3CT,+L,+U%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bounded_vec/bounded_vec.rs.html#9\">Source</a><a href=\"#impl-StructuralPartialEq-for-BoundedVec%3CT,+L,+U%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const L: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, const U: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"bounded_vec/struct.BoundedVec.html\" title=\"struct bounded_vec::BoundedVec\">BoundedVec</a>&lt;T, L, U&gt;</h3></section>","StructuralPartialEq","bounded_vec::bounded_vec::NonEmptyVec"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[64684]}